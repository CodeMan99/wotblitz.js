#!/usr/bin/env node

var program = require('commander');
var request = require('./lib/request.js')('players');
var session = require('./lib/session.js');
var types = require('./lib/types.js');

module.exports = {
  list: list,
  info: info,
  achievements: achievements
};

if (require.main === module) {
  main(
    program
      .option('-s, --search <name>', 'search for a player (endpoint)')
      .option('-i, --info [account_id]', 'player details (endpoint)', types.numbers)
      .option('-a, --achievements [account_id]', 'achievement details (endpoint)', types.numbers)
      .option('-f, --fields <fields>', 'the fields to select of the endpoint', types.fields, [])
      .parse(process.argv)
  );
}

function main(opts) {
  session.load(function playersSessionLoad(err, sess) {
    if (err) throw err;

    // always return to only allow one request to avoid race conditions on save

    if (opts.search) return list(opts.search, sess, _dir);

    if (opts.info) return info(opts.info, opts.fields, sess, _dir);

    if (opts.achievements) return achievements(opts.achievements, sess, _dir);
  });
}

function _dir(err, data) {
  if (err) throw err;
  console.dir(data, {colors: process.stdout.isTTY, depth: 3});
}

function list(search, sess, callback) {
  request('list', {
    search: search
  }, function listRequestCb(err, data) {
    if (err) return callback(err);
    if (data.data.length !== 1) return callback(null, data.data);

    sess.account_id = data.data[0].account_id;
    sess.save(function searchSessionSaveCb(saveErr) {
      if (saveErr) return callback(saveErr);
      callback(null, data.data, sess);
    });
  });
}

function info(accountIds, fields, sess, callback) {
  var body =  {
    account_id: typeof accoundIds === 'object' ? accountIds.join(',') : sess.account_id,
    fields: fields.join(',')
  };

  if (sess.auth !== null) body.access_token = sess.auth.access_token;

  request('info', body, function infoRequestCb(err, data) {
    if (err) return callback(err);
    callback(null, data.data);
  });
}

function achievements(accountIds, sess, callback) {
  request('achievements', {
    account_id: typeof accountIds === 'object' ? accountIds.join(',') : sess.account_id
  }, function achievementsRequestCb(err, data) {
    if (err) return callback(err);
    callback(null, data.data);
  });
}
